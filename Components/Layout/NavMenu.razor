@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@using Blazored.LocalStorage

<nav class="navbar navbar-expand-lg bg-dark navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">
            <img src="/Logo4.png" style="height: 100px;" alt="Logo" />
        </a>

        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/performance" Match="NavLinkMatch.Prefix">Performance</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/servicios" Match="NavLinkMatch.Prefix">Servicios</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/pedircita" Match="NavLinkMatch.Prefix">Pedir Cita</NavLink>
                </li>
                @if (isAuthenticated)
                {
                    @if (isAdmin)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/admin">Admin</NavLink>
                        </li>
                    }
                    else if (isMechanic)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/mecanico">@userName</NavLink>
                        </li>
                    }
                    else if (isReceptionist)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/recepcionista">@userName</NavLink>
                        </li>
                    }
                    else if (isClient)
                    {
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/clientesIndex">@userName</NavLink>
                        </li>
                    }
                    <li class="nav-item">
                        <button class="btn btn-link" @onclick="LogOut">Cerrar sesión</button>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/Identity/Account/Login">Iniciar Sesión</NavLink>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool isAuthenticated = false;
    private bool isAdmin = false;
    private bool isMechanic = false;
    private bool isReceptionist = false;
    private bool isClient = false;
    private string userName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient("DefaultClient");

        try
        {
            // Solicitar información del usuario
            var response = await client.GetAsync("api/auth/userinfo");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Contenido de la respuesta: {content}");

                var userInfo = await response.Content.ReadFromJsonAsync<UserInfo>();

                if (userInfo != null)
                {
                    isAuthenticated = userInfo.IsAuthenticated;
                    isAdmin = userInfo.Roles.Contains("Admin");
                    isMechanic = userInfo.Roles.Contains("empleadomecanico"); // Verificar rol de mecánico
                    isReceptionist = userInfo.Roles.Contains("empleadorecepcionista"); // Verificar rol de recepcionista
                    isClient = userInfo.Roles.Contains("cliente"); // Verificar rol de cliente
                    userName = userInfo.Name; // Almacenar el nombre del usuario

                    // Forzar actualización de la UI
                    StateHasChanged();
                }
            }
            else
            {
                Console.WriteLine($"Error al obtener datos del usuario: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al procesar la solicitud: {ex.Message}");
        }
    }

    private class UserInfo
    {
        public bool IsAuthenticated { get; set; }
        public List<string> Roles { get; set; } = new List<string>();
        public string Name { get; set; } = string.Empty; // Nuevo campo para el nombre del usuario
    }

    private async Task LogOut()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("DefaultClient");

            // Llamar al endpoint de logout
            var response = await client.PostAsync("api/auth/logout", null);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Logout exitoso");

                // Limpiar el estado del cliente
                if (AuthenticationStateProvider is RevalidatingIdentityAuthenticationStateProvider<IdentityUser> revalidatingProvider)
                {
                    await revalidatingProvider.SignOutAsync();
                }

                // Redirigir al usuario a la página principal
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Error al cerrar sesión: {response.StatusCode}, Detalles: {content}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cerrar sesión: {ex.Message}");
        }
    }

}
