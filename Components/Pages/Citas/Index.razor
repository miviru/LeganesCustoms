@page "/cita"
@inject CitaService CitaService
@inject NavigationManager NavigationManager
@using LeganesCustomsBlazor.Models;
@using LeganesCustomsBlazor.Dtos;
@using LeganesCustomsBlazor.Services


<PageTitle>Citas</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 mb-4 mt-3">
            <h3>CITAS</h3>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Tarjeta para registrar una nueva cita -->
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card" style="background-image: url('/fondo2.jpg'); background-size: cover; background-position: center;">
                <div class="card-body d-flex flex-column align-items-center justify-content-center">
                    <NavLink class="btn btn-outline-warning" href="/pedircita">
                        Registrar cita
                    </NavLink>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Tarjetas para las citas existentes -->
        @if (citas != null && citas.Any())
        {
            @foreach (var cita in citas)
            {
                <div class="col-12 col-md-6 col-lg-5">
                    <div class="card mt-4" style="background-image: url('/fondo2.jpg'); background-size: cover; background-position: center;">
                        <div class="card-body d-flex flex-wrap align-items-center">
                            <h5 class="card-title me-5 mt-2">@cita.Fecha.ToString("dd/MM/yyyy") @cita.Hora @cita.ClienteNombre @cita.ClienteApellido</h5>
                            <NavLink class="btn btn-outline-secondary text-white me-2" href="@($"/detallesCita/{cita.Id}")">Detalles</NavLink>
                            <NavLink class="btn btn-outline-light me-2" href="@($"/editarCita/{cita.Id}")">Editar</NavLink>
                            <button @onclick="() => DeleteCita(cita.Id)" class="btn btn-outline-danger">Eliminar</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center">
                <p>No hay citas registradas.</p>
            </div>
        }
    </div>
</div>

@code {
    private List<CitaDto> citas = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCitasAsync();
    }

    private async Task LoadCitasAsync()
    {
        try
        {
            // ObtÃ©n las citas desde el servicio
            var citasModel = await CitaService.GetAllCitasAsync();

            // Mapea las citas al modelo necesario (CitaDto en este caso)
            citas = citasModel.Select(c => new CitaDto
            {
                Id = c.Id,
                Fecha = c.Fecha,
                Hora = c.Hora,
                ClienteNombre = c.ClienteNombre,
                ClienteApellido = c.ClienteApellido,
                EmpleadoNombre = c.EmpleadoNombre,
                VehiculoDetalles = c.VehiculoDetalles
            }).ToList();

            // Muestra el conteo de citas cargadas en la consola
            Console.WriteLine($"Citas cargadas: {citas.Count}");

            // Notifica al componente que debe renderizarse nuevamente
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Muestra el error en la consola
            Console.WriteLine($"Error al cargar las citas: {ex.Message}");
        }
    }

    private async Task DeleteCita(long citaId)
    {
        try
        {
            await CitaService.DeleteCitaAsync(citaId);
            citas = citas.Where(v => v.Id != citaId).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar la cita: {ex.Message}");
        }
    }
}
