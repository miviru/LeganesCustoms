@using LeganesCustomsBlazor.Models
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject VehiculoService VehiculoService
@using LeganesCustomsBlazor.Dtos

<h4>Selecciona el Vehículo</h4>
<div>
    <label>Vehículo</label>
        <div class="col-md-5">
            <select class="form-select" @bind="VehiculoSeleccionadoId">
                <option value="" disabled selected>-- Selecciona un vehículo --</option>
                @foreach (var vehiculo in Vehiculos)
                {
                    <option value="@vehiculo.Id_Vehiculo">@vehiculo.Matricula - @vehiculo.Fabricante @vehiculo.Modelo</option>
                }
            </select>
        </div>

    <button class="btn btn-primary mt-3" @onclick="NextStep" disabled="@(VehiculoSeleccionadoId == null)">Siguiente</button>
    <button class="btn btn-secondary mt-3 ms-2" @onclick="PreviousStep">Anterior</button>
    <button class="btn btn-secondary mt-3 ms-2" @onclick="CrearVehiculo">Crear Nuevo Vehículo</button>
</div>

@code {
    [Parameter] public EventCallback OnNext { get; set; }
    [Parameter] public EventCallback OnPrevious { get; set; }
    [Parameter] public long ClienteId { get; set; }
    [Parameter] public Cliente Cliente { get; set; } = null!;
    private List<VehiculoDto> Vehiculos = new();
    private long? VehiculoSeleccionadoId;

    // Método para cargar los vehículos de un cliente
    private async Task CargarVehiculos(long clienteId)
    {
        try
        {
            Vehiculos = await VehiculoService.ObtenerVehiculosPorClienteAsync(clienteId);
            Console.WriteLine($"Vehículos cargados para el cliente {clienteId}: {Vehiculos.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar vehículos: {ex.Message}");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (ClienteId > 0)
        {
            await CargarVehiculos(ClienteId);
        }
        else
        {
            Console.WriteLine("ClienteId no es válido.");
        }
    }

    private async Task NextStep()
    {
        if (VehiculoSeleccionadoId != null)
        {
            // Avanzar al siguiente paso si se seleccionó un vehículo
            await OnNext.InvokeAsync();
        }
    }

    private async Task PreviousStep()
    {
        await OnPrevious.InvokeAsync();
    }

    private void CrearVehiculo()
    {
        // Redirigir a la vista de crear vehículo
        NavigationManager.NavigateTo("/crearVehiculo");
    }
}
