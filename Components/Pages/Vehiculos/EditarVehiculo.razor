@page "/editarVehiculo/{Id:long}"
@inject VehiculoService VehiculoService
@inject NavigationManager NavigationManager
@using LeganesCustomsBlazor.Models;
@using LeganesCustomsBlazor.Dtos;

<PageTitle>Editar Vehículo</PageTitle>

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-lg-12">
            <h3>EDITAR VEHÍCULO</h3>
        </div>
    </div>

    @if (vehiculo == null)
    {
        <p>Cargando datos del vehiculo...</p>
    }
    else
    {
        <div class="row">
            <EditForm Model="@vehiculo" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mt-3">
                    <label for="matricula" class="form-label">Matricula:</label>
                    <div class="col-md-3">
                        <InputText id="matricula" class="form-control" @bind-Value="vehiculo.Matricula" />
                    </div>
                </div>

                <div class="form-group mt-3">
                    <div class="col-lg-3 ">
                        <label for="motorizacion" class="form-label">Motorización:</label><br/>
                        <select name="motorizacion" id="motorizacion" class="form-select" @bind="vehiculo.Motorizacion">
                            <option value="" selected>Seleccione modelo</option>
                            <option value="gasolina">Gasolina</option>
                            <option value="diesel">Diésel</option>
                            <option value="hibrido">Híbrido</option>
                            <option value="GLP">GLP</option>
                        </select>
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label for="motor" class="form-label">Motor:</label>
                    <div class="col-md-3">
                        <InputText id="motor" class="form-control" @bind-Value="vehiculo.Motor" />
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label for="color" class="form-label">Color:</label>
                    <div class="col-md-3">
                        <InputText id="color" class="form-control" @bind-Value="vehiculo.Color" />
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label for="foto" class="form-label">Foto:</label>
                    <div class="col-md-3">
                        <InputFile id="foto" OnChange="OnFileSelected" />
                        @if (!string.IsNullOrEmpty(vehiculo.FotoUrl))
                        {
                            <img src="@vehiculo.FotoUrl" alt="Vista previa" class="img-thumbnail mt-2" style="max-width: 150px;" />
                        }
                    </div>
                </div>

                <div class="mt-3">
                    <button type="submit" class="btn btn-success">Guardar Cambios</button>
                    <NavLink class="btn btn-outline-secondary ms-2 text-white" href="/vehiculo">Cancelar</NavLink>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public long Id { get; set; } // Parámetro recibido desde la URL

    private VehiculoDto? vehiculo;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            vehiculo = await VehiculoService.GetVehiculoByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar vehiculo: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (vehiculo == null)
        {
            Console.WriteLine("Error: El vehiculo no está inicializado.");
            return;
        }

        try
        {
            // Llamar al servicio con el DTO directamente
            await VehiculoService.UpdateVehiculoAsync(vehiculo);
            Console.WriteLine("Vehiculo actualizado con éxito.");
            NavigationManager.NavigateTo("/vehiculo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar vehiculo: {ex.Message}");
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo != null)
        {
            // Validar tipo de archivo
            if (!archivo.ContentType.StartsWith("image/"))
            {
                Console.WriteLine("Error: Solo se permiten archivos de imagen.");
                return;
            }

            // Validar tamaño máximo (ejemplo: 2 MB)
            const long maxSizeInBytes = 2 * 1024 * 1024;
            if (archivo.Size > maxSizeInBytes)
            {
                Console.WriteLine("Error: El archivo supera el tamaño máximo permitido (2 MB).");
                return;
            }

            // Procesar archivo
            using var stream = archivo.OpenReadStream(maxSizeInBytes);
            var buffer = new byte[archivo.Size];
            await stream.ReadAsync(buffer);

            // Convierte a base64 (opcional, para mostrar la imagen directamente)
            if (vehiculo != null)
            {
                vehiculo.FotoUrl = $"data:{archivo.ContentType};base64,{Convert.ToBase64String(buffer)}";
                Console.WriteLine("Archivo cargado con éxito.");
            }
            else
            {
                Console.WriteLine("Error: El objeto 'vehiculo' no está inicializado.");
            }

        }
    }
}
