@page "/crearVehiculo"
@inject VehiculoService VehiculoService
@inject ClienteService ClienteService
@inject ReferenciaVehiculosService ReferenciaVehiculosService
@inject NavigationManager NavigationManager
@using LeganesCustomsBlazor.Models;
@using Newtonsoft.Json
@using LeganesCustomsBlazor.Dtos

<PageTitle>Crear Vehiculos</PageTitle>

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-lg-12">
            <h3>REGISTRAR VEHÍCULO</h3>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-lg-4">
            <label for="fabricante">Fabricante</label>
            <select name="fabricante" id="fabricante" @bind="NombreFabricante">
                <option value="">Seleccione fabricante</option>
                @foreach (var fabricante in FabricantesDisponibles)
                {
                    <option value="@fabricante.Nombre">@fabricante.Nombre</option>
                }
            </select>
        </div>

        <div class="col-lg-4">
            <label>Modelo</label>
            <select name="modelo" id="modelo" @bind="ModeloSeleccionado" disabled="@(!modelosDisponibles.Any())">
                <option value="" disabled selected>Seleccione modelo</option>
                @foreach (var modelo in modelosDisponibles)
                {
                    <option value="@modelo">@modelo</option>
                }
            </select>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-lg-4">
            <label>Motorización</label>
            <select name="motorizacion" id="motorizacion" @bind="MotorizacionSeleccionada" disabled="@(!motorizacionesDisponibles.Any())">
                <option value="" disabled selected>Seleccione motorización</option>
                @if (motorizacionesDisponibles.Any())
                {
                    @foreach (var motorizacion in motorizacionesDisponibles)
                    {
                        <option value="@motorizacion">@motorizacion</option>
                    }
                }
                else
                {
                    <option value="" disabled>No hay motorizaciones disponibles</option>
                }
            </select>
        </div>

        <div class="col-lg-4">
            <label>Motor</label>
            <select name="motor" id="motor" @bind="Vehiculo.Motor" disabled="@(!motoresDisponibles.Any())">
                <option value="" disabled selected>Seleccione motor</option>
                @if (motoresDisponibles.Any())
                {
                    @foreach (var motor in motoresDisponibles)
                    {
                        <option value="@motor">@motor</option>
                    }
                }
                else
                {
                    <option value="" disabled>No hay motores disponibles</option>
                }
            </select>
        </div>

    </div>

    <div class="row mt-2">
        <div class="col-lg-4">
            <label>Matrícula</label>
            <input type="text" @bind="Vehiculo.Matricula" />
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-lg-4">
            <label>Color</label>
            <input type="text" @bind="Vehiculo.Color" />
        </div>
    </div>

    <div class="row mt-2">
        <div class="form-group mt-3">
            <label for="foto" class="form-label">Foto:</label>
            <div class="col-md-3">
                <InputFile id="foto" OnChange="OnFileSelected" />
                @if (!string.IsNullOrEmpty(Vehiculo.FotoUrl))
                {
                    <img src="@Vehiculo.FotoUrl" alt="Vista previa" class="img-thumbnail mt-2" style="max-width: 150px;" />
                }
            </div>
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-lg-12">
            <input type="checkbox" id="asociarCliente" @bind="AsociarCliente" />
            <label for="asociarCliente">¿Desea asociar este vehículo a un cliente?</label>
            @if (AsociarCliente)
            {
                <div class="row mt-2">
                    <div class="col-lg-12">
                        <label>Seleccione un cliente</label>
                        <select @bind="ClienteSeleccionadoId">
                            <option value="">Seleccione cliente</option>
                            @foreach (var cliente in ClientesDisponibles)
                            {
                                <option value="@cliente.Id_Cliente">@cliente.Nombre (@cliente.DNI)</option>
                            }
                        </select>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="row mt-4">
        <div class="col-lg-4">
            <button class="btn btn-outline-warning" @onclick="RegistrarVehiculo">Crear</button>
        </div>
    </div>

    
</div>

@code {
    [Parameter] public EventCallback OnNext { get; set; }
    private List<Fabricante> FabricantesDisponibles { get; set; } = new List<Fabricante>();
    private bool AsociarCliente { get; set; } = false; // Estado del checkbox
    private string ClienteSeleccionadoId { get; set; } = string.Empty; // ID del cliente seleccionado
    private List<ClienteDto> ClientesDisponibles { get; set; } = new List<ClienteDto>(); // Lista de clientes disponibles

    [Parameter] public Vehiculo Vehiculo { get; set; } = new Vehiculo
    {
        Fabricante = new Fabricante
        {
            Nombre = string.Empty,
            Grupo = new Grupo
            {
                Nombre = string.Empty,
                Fabricantes = new List<Fabricante>()
            },
            Vehiculos = new List<Vehiculo>()
        },
        Cliente = new Cliente
        {
            Vehiculos = new List<Vehiculo>()
        },
        Citas = new List<Cita>(),
        Modelo = string.Empty,
        Motorizacion = string.Empty,
        Motor = string.Empty,
        Matricula = string.Empty,
        Fecha_matriculacion = DateTime.Now,
        Color = string.Empty
    };
    private List<string> motorizacionesDisponibles = new List<string>();

    public string NombreFabricante
    {
        get => Vehiculo.Fabricante?.Nombre ?? string.Empty;
        set
        {
            if (Vehiculo.Fabricante == null)
            {
                Vehiculo.Fabricante = new Fabricante
                {
                    Grupo = new Grupo
                    {
                        Nombre = string.Empty,
                        Fabricantes = new List<Fabricante>()
                    },
                    Vehiculos = new List<Vehiculo>()
                };
            }
            Vehiculo.Fabricante.Nombre = value;

            // Llama a CargarModelos de forma asíncrona
            _ = CargarModelos();

            StateHasChanged();
        }
    }

    private List<string> modelosDisponibles = new List<string>();

    private List<string> motoresDisponibles = new List<string>();


    public string MotorizacionSeleccionada
    {
        get => Vehiculo.Motorizacion ?? string.Empty;
        set
        {
            Vehiculo.Motorizacion = value;

            if (!string.IsNullOrEmpty(Vehiculo.Motorizacion) && !string.IsNullOrEmpty(Vehiculo.Modelo))
            {
                // Cargar los motores disponibles basados en el modelo y motorización
                _ = CargarMotoresAsync();
            }
            else
            {
                motoresDisponibles = new List<string>();
            }

            StateHasChanged();
        }
    }
    private async Task CargarMotoresAsync()
    {
        if (!string.IsNullOrEmpty(Vehiculo.Modelo) && !string.IsNullOrEmpty(Vehiculo.Motorizacion))
        {
            // Obtener motores específicos para la motorización seleccionada
            motoresDisponibles = await ReferenciaVehiculosService.ObtenerMotorizaciones(Vehiculo.Modelo, Vehiculo.Motorizacion);
        }
        else
        {
            motoresDisponibles = new List<string>();
        }

        StateHasChanged();
    }

    public string ModeloSeleccionado
    {
        get => Vehiculo.Modelo ?? string.Empty;
        set
        {
            Vehiculo.Modelo = value;

            if (!string.IsNullOrEmpty(Vehiculo.Modelo))
            {
                // Carga las motorizaciones (Gasolina, Diésel, etc.) basadas en el modelo
                _ = CargarMotorizacionesAsync();
            }
            else
            {
                motorizacionesDisponibles = new List<string>();
                motoresDisponibles = new List<string>();
            }

            StateHasChanged();
        }
    }

   private async Task CargarMotorizacionesAsync()
    {
        if (!string.IsNullOrEmpty(Vehiculo.Modelo))
        {
            // Obtener las motorizaciones disponibles (Gasolina, Diésel, etc.) para el modelo
            motorizacionesDisponibles = (await ReferenciaVehiculosService.ObtenerMotorizaciones(Vehiculo.Modelo, null))
                                        .Distinct() // Asegura que no se repitan
                                        .ToList();
        }
        else
        {
            motorizacionesDisponibles = new List<string>();
        }

        motoresDisponibles = new List<string>(); // Resetea motores al cambiar motorización
        StateHasChanged();
    }

    private async Task CargarMotores()
    {
        if (!string.IsNullOrEmpty(Vehiculo.Modelo) && !string.IsNullOrEmpty(Vehiculo.Motorizacion))
        {
            motoresDisponibles = await ReferenciaVehiculosService.ObtenerMotorizaciones(Vehiculo.Modelo, Vehiculo.Motorizacion);
        }
        else
        {
            motoresDisponibles = new List<string>();
        }

        // Notifica a Blazor que el estado ha cambiado
        StateHasChanged();
        }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Cargar fabricantes
            FabricantesDisponibles = await VehiculoService.ObtenerFabricantesAsync();

            if (!FabricantesDisponibles.Any())
            {
                Console.WriteLine("No se encontraron fabricantes disponibles.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar fabricantes: {ex.Message}");
        }

        try
        {
            // Cargar clientes
            ClientesDisponibles = await ClienteService.ObtenerClientesAsync();

            if (!ClientesDisponibles.Any())
            {
                Console.WriteLine("No se encontraron clientes disponibles.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar clientes: {ex.Message}");
        }
    }

    private async Task RegistrarVehiculo()
    {
        try
        {
            // Construir el DTO que se enviará al servidor
            var vehiculoDto = new VehiculoDto
            {
                Matricula = Vehiculo.Matricula,
                Modelo = Vehiculo.Modelo,
                Fabricante = NombreFabricante,
                Motorizacion = Vehiculo.Motorizacion,
                Motor = Vehiculo.Motor,
                Fecha_matriculacion = Vehiculo.Fecha_matriculacion,
                Color = Vehiculo.Color,
                FotoUrl = Vehiculo.FotoUrl,
                Id_cliente = AsociarCliente ? long.Parse(ClienteSeleccionadoId) : null // Si no se asocia cliente, enviar null
            };

            // Llamar al servicio para crear el vehículo
            await VehiculoService.CrearVehiculoAsync(vehiculoDto);

            Console.WriteLine("Vehículo creado correctamente.");

            // Redirigir a "/vehiculo" después de crear el vehículo
            NavigationManager.NavigateTo("/vehiculo");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al crear el vehículo: {ex.Message}");
        }
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var archivo = e.File;
        if (archivo != null)
        {
            // Validar tipo de archivo
            if (!archivo.ContentType.StartsWith("image/"))
            {
                Console.WriteLine("Error: Solo se permiten archivos de imagen.");
                return;
            }

            // Validar tamaño máximo (ejemplo: 2 MB)
            const long maxSizeInBytes = 2 * 1024 * 1024;
            if (archivo.Size > maxSizeInBytes)
            {
                Console.WriteLine("Error: El archivo supera el tamaño máximo permitido (2 MB).");
                return;
            }

            try
            {
                // Procesar archivo
                using var stream = archivo.OpenReadStream(maxSizeInBytes);
                var buffer = new byte[archivo.Size];
                await stream.ReadAsync(buffer);

                // Convierte a base64 y asigna a FotoUrl de Vehiculo
                Vehiculo.FotoUrl = $"data:{archivo.ContentType};base64,{Convert.ToBase64String(buffer)}";
                Console.WriteLine("Archivo cargado con éxito.");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error al procesar el archivo: {ex.Message}");
            }
        }
    }

    private async Task CargarModelos()
    {
        if (!string.IsNullOrEmpty(NombreFabricante))
        {
            modelosDisponibles = await ReferenciaVehiculosService.ObtenerModelos(NombreFabricante);
        }
        else
        {
            modelosDisponibles = new List<string>();
        }

        motorizacionesDisponibles = new List<string>(); // Reinicia al cambiar fabricante
    }

    private async Task CargarMotorizaciones()
    {
        if (!string.IsNullOrEmpty(ModeloSeleccionado))
        {
            motorizacionesDisponibles = await ReferenciaVehiculosService.ObtenerMotorizaciones(ModeloSeleccionado, "Gasolina");
        }
        else
        {
            motorizacionesDisponibles = new List<string>();
        }
    }
}