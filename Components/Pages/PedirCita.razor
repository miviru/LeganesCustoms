@page "/pedircita"
@rendermode InteractiveServer
@using LeganesCustomsBlazor.Components.Pages
@using LeganesCustomsBlazor.Models

<PageTitle>Pedir cita</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12">
            <h1>PEDIR CITA</h1>
        </div>
    </div>

    <div>
        @if (IsConfirmed)
        {
            <div class="alert alert-success mt-3">
                ¡Cita confirmada exitosamente!
            </div>
        }
        else
        {
            <ul class="steps-indicator">
                <li class="@(CurrentStep == 1 ? "active" : "")">Paso 1: Cliente</li>
                <li class="@(CurrentStep == 2 ? "active" : "")">Paso 2: Vehículo</li>
                <li class="@(CurrentStep == 3 ? "active" : "")">Paso 3: Servicio</li>
                <li class="@(CurrentStep == 4 ? "active" : "")">Paso 4: Fecha y Hora</li>
                <li class="@(CurrentStep == 5 ? "active" : "")">Paso 5: Resumen</li>
            </ul>

            <div>
                @if (CurrentStep == 1)
                {
                    <PasoCliente OnClienteSeleccionado="ClienteSeleccionado" />
                }
                else if (CurrentStep == 2)
                {
                    @if (ClientData != null)
                    {
                        <PasoDatosVehiculo ClienteId="@ClientData.Id_Cliente" OnNext="GoToNextStep" OnPrevious="GoToPreviousStep" />
                    }
                    else
                    {
                        <div class="alert alert-danger">
                            No se ha seleccionado un cliente. Vuelve al paso anterior.
                        </div>
                    }
                }
                else if (CurrentStep == 3)
                {
                    <PasoServicio 
                        SelectedService="@SelectedService" 
                        OnServiceChanged="UpdateSelectedService" 
                        OnNext="GoToNextStep" 
                        OnPrevious="GoToPreviousStep" />
                }
                else if (CurrentStep == 4)
                {
                    @if (SelectedService == null || SelectedService.Duracion <= 0)
                    {
                        <div class="alert alert-danger">
                            No se seleccionó un servicio válido. Vuelve al paso anterior.
                        </div>
                    }
                    else
                    {
                    <PasoFecha 
                        OnDateTimeSelected="HandleDateTimeSelected" 
                        OnPrevious="GoToPreviousStep" 
                        ServiceDuration="@SelectedService.Duracion" />
                    }
                }
                else if (CurrentStep == 5)
                {
                    <PasoResumen 
                        VehicleData="@VehiculoData" 
                        SelectedService="@SelectedService" 
                        SelectedDateTime="@SelectedDateTime" 
                        ClientData="@ClientData" 
                        OnPrevious="GoToPreviousStep" 
                        OnNext="ConfirmAppointment" />
                }
            </div>
        }
    </div>
</div>

@code {
    private int CurrentStep = 1;
    private bool IsConfirmed = false;

    [Inject] private NavigationManager Navigation { get; set; } = null!;

    private Cliente? ClientData;
    private Vehiculo VehiculoData = new Vehiculo
    {
        Fabricante = new Fabricante
        {
            Nombre = string.Empty,
            Grupo = new Grupo
            {
                Nombre = string.Empty,
                Fabricantes = new List<Fabricante>()
            }
        },
        Modelo = string.Empty,
        Matricula = string.Empty,
        Motorizacion = string.Empty,
        Motor = string.Empty,
        Fecha_matriculacion = DateTime.Now,
        Color = string.Empty,
        Citas = new List<Cita>(),
        Cliente = new Cliente
        {
            Nombre = string.Empty,
            Apellido1 = string.Empty,
            Apellido2 = string.Empty,
            DNI = string.Empty,
            Vehiculos = new List<Vehiculo>()
        }
    };
    private Servicio SelectedService = new Servicio();
    private DateTime SelectedDateTime;

    private void ClienteSeleccionado(Cliente cliente)
    {
        ClientData = cliente;
        Console.WriteLine($"Cliente seleccionado: {cliente.Id_Cliente}"); // Depuración
        GoToNextStep();
    }

    private void UpdateSelectedService(Servicio? selectedService)
    {
        if (selectedService == null || selectedService.Duracion <= 0)
        {
            Console.WriteLine("Error: No se seleccionó un servicio válido.");
            return;
        }

        SelectedService = selectedService;
        Console.WriteLine($"Servicio seleccionado: {SelectedService.Nombre}");
    }

        private async Task HandleDateTimeSelected(DateTime dateTime)
        {
            SelectedDateTime = dateTime;
            Console.WriteLine($"Fecha y hora seleccionadas: {SelectedDateTime}");
            GoToNextStep();
        }

    private void GoToNextStep()
    {
        if (CurrentStep < 5)
        {
            CurrentStep++;
        }
    }

    private void GoToPreviousStep()
    {
        if (CurrentStep > 1)
        {
            CurrentStep--;
        }
    }

    private async Task ConfirmAppointment()
    {
        await GuardarCitaEnBaseDeDatos();
        IsConfirmed = true;

        Navigation.NavigateTo("/?citaConfirmada=true", true);
    }

    private async Task GuardarCitaEnBaseDeDatos()
    {
        // Simulación de guardar en base de datos
        await Task.Delay(500); // Simula una operación de guardado
        Console.WriteLine("Cita guardada en la base de datos.");
    }
}
