@page "/crearEmpleado"
@inject IEmpleadoService EmpleadoService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient
@using LeganesCustomsBlazor.Services
@using LeganesCustomsBlazor.Dtos
@using System.Text.Json 
@using System.Text

<PageTitle>Crear Empleados</PageTitle>

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-lg-12">
            <h3>CREAR EMPLEADOS</h3>
        </div>
    </div>

    <div class="row">
        <EditForm Model="@empleado" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">@errorMessage</div>
            }

            <div class="form-group">
                <label for="name">Nombre:</label>
                <div class="col-md-5">
                    <InputText id="name" class="form-control" @bind-Value="empleado.Nombre" />
                </div>
                <ValidationMessage For="@(() => empleado.Nombre)" />
            </div>

            <div class="form-group mt-3">
                <label for="apellido1">Primer apellido:</label>
                <div class="col-md-5">
                    <InputText id="apellido1" class="form-control" @bind-Value="empleado.Apellido1" />
                </div>
                <ValidationMessage For="@(() => empleado.Apellido1)" />
            </div>

            <div class="form-group mt-3">
                <label for="apellido2">Segundo apellido:</label>
                <div class="col-md-5">
                    <InputText id="apellido2" class="form-control" @bind-Value="empleado.Apellido2" />
                </div>
                <ValidationMessage For="@(() => empleado.Apellido2)" />
            </div>

            <div class="form-group mt-3">
                <label for="dni">DNI:</label>
                <div class="col-md-5">
                    <InputText id="dni" class="form-control" @bind-Value="empleado.DNI" />
                </div>
                <ValidationMessage For="@(() => empleado.DNI)" />
            </div>

            <div class="form-group mt-3">
                <label for="email">Email:</label>
                <div class="col-md-5">
                    <InputText id="email" class="form-control" @bind-Value="empleado.Email" />
                </div>
                <ValidationMessage For="@(() => empleado.Email)" />
            </div>

            <div class="form-group mt-3">
                <label for="password">Contraseña:</label>
                <div class="col-md-5">
                    <InputText id="password" type="password" class="form-control" @bind-Value="empleado.Password" />
                </div>
                <ValidationMessage For="@(() => empleado.Password)" />
            </div>

            <div class="form-group mt-3">
                <label for="confirmPassword">Confirmar Contraseña:</label>
                <div class="col-md-5">
                    <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="empleado.ConfirmPassword" />
                </div>
                <ValidationMessage For="@(() => empleado.ConfirmPassword)" />
            </div>

            <div class="form-group mt-3">
                <label for="direccion">Dirección:</label>
                <div class="col-md-5">
                    <InputText id="direccion" class="form-control" @bind-Value="empleado.Direccion" />
                </div>
                <ValidationMessage For="@(() => empleado.Direccion)" />
            </div>

            <div class="form-group mt-3">
                <label for="telefono">Teléfono:</label>
                <div class="col-md-5">
                    <InputText id="telefono" class="form-control" @bind-Value="empleado.Telefono" />
                </div>
                <ValidationMessage For="@(() => empleado.Telefono)" />
            </div>

            <div class="form-group mt-3">
                <label for="puesto">Puesto:</label>
                <div class="col-md-5">
                    <InputSelect id="puesto" class="form-control" @bind-Value="empleado.Puesto">
                        @foreach (var puesto in puestosDisponibles)
                        {
                            <option value="@puesto">@puesto</option>
                        }
                    </InputSelect>
                </div>
                <ValidationMessage For="@(() => empleado.Puesto)" />
            </div>

            <div class="form-group mt-3">
                <label for="sueldo">Sueldo:</label>
                <div class="col-md-5">
                    <InputNumber id="sueldo" class="form-control" @bind-Value="empleado.Sueldo" />
                </div>
                <ValidationMessage For="@(() => empleado.Sueldo)" />
            </div>

            <button type="submit" class="btn btn-outline-warning mt-3">Crear Empleado</button>
        </EditForm>
    </div>
</div>

@code {
    private EmpleadoDto empleado = new EmpleadoDto();
    private string errorMessage = string.Empty;
    private string confirmPassword = string.Empty;

    private List<string> puestosDisponibles = new List<string> { "Recepcionista", "Mecánico" };

    private async Task HandleValidSubmit()
    {
        // Validar que las contraseñas coinciden
        if (empleado.Password != empleado.ConfirmPassword) // Usa la propiedad correctamente
        {
            errorMessage = "Las contraseñas no coinciden.";
            return;
        }

        // Validar la longitud de la contraseña
        if (string.IsNullOrEmpty(empleado.Password) || empleado.Password.Length < 8)
        {
            errorMessage = "La contraseña debe tener al menos 8 caracteres.";
            return;
        }

        try
        {
            var jsonContent = JsonSerializer.Serialize(empleado, new JsonSerializerOptions
            {
                WriteIndented = false
            });

            Console.WriteLine($"JSON enviado: {jsonContent}"); // Depuración

            var request = new HttpRequestMessage(HttpMethod.Post, "api/empleado")
            {
                Content = new StringContent(jsonContent, Encoding.UTF8, "application/json")
            };

            var response = await HttpClient.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/empleado");
            }
            else
            {
                errorMessage = $"Error: {response.StatusCode}";
                Console.WriteLine($"Error: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al crear empleado: {ex.Message}";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }

}
