@page "/empleado"
@inject IEmpleadoService EmpleadoService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using LeganesCustomsBlazor.Models;
@using LeganesCustomsBlazor.Dtos;
@using LeganesCustomsBlazor.Services;

<PageTitle>Empleados</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 mb-4 mt-3">
            <h3> EMPLEADOS</h3>
        </div>
    </div>
    
    <div class="row mb-4">
        <!-- Tarjeta para crear un nuevo empleado -->
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card" style="background-image: url('/fondo2.jpg'); background-size: cover; background-position: center;">
                <div class="card-body d-flex flex-column align-items-center justify-content-center">
                    <NavLink class="btn btn-outline-warning" href="/crearEmpleado">
                        Crear Empleado
                    </NavLink>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Tarjetas para los empleados existentes -->
        @if (empleados != null && empleados.Any())
        {
            @foreach (var empleado in empleados)
            {
                <div class="col-12 col-md-6 col-lg-4">
                    <div class="card mt-4" style="background-image: url('/fondo2.jpg'); background-size: cover; background-position: center;">
                        <div class="card-body d-flex flex-wrap align-items-center">
                            <h5 class="card-title me-5 mt-2">@empleado.Nombre @empleado.Apellido1 @empleado.Apellido2</h5>
                            <NavLink class="btn btn-outline-secondary text-white me-2" href="@($"/detallesEmpleado/{empleado.Id_Empleado}")">Detalles</NavLink>
                            <NavLink class="btn btn-outline-light me-2" href="@($"/editarEmpleado/{empleado.Id_Empleado}")">Editar</NavLink>
                            <button @onclick="() => ConfirmAndDelete(empleado.Id_Empleado)" class="btn btn-outline-danger">Eliminar</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center">
                <p>No hay empleados registrados.</p>
            </div>
        }
    </div>
</div>


@code {
    private List<EmpleadoDto> empleados = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            empleados = await EmpleadoService.GetEmpleadosAsync();
            Console.WriteLine($"Empleados cargados: {empleados.Count}");
            StateHasChanged(); // Forzar renderizado
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los empleados: {ex.Message}");
        }
    }

    private void EditEmpleado(long empleadoId)
    {
        NavigationManager.NavigateTo($"/editarEmpleado/{empleadoId}");
    }

private async Task DeleteEmpleado(long id)
{
    try
    {
        Console.WriteLine($"Eliminando empleado con ID: {id}");
        await EmpleadoService.DeleteEmpleadoAsync(id);
        Console.WriteLine($"Empleado con ID {id} eliminado del servidor.");

        empleados.Remove(empleados.First(e => e.Id_Empleado == id)); // Actualiza la lista local
        Console.WriteLine($"Empleado con ID {id} eliminado localmente.");
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error al eliminar el empleado con ID {id}: {ex.Message}");
    }
}


private async Task ConfirmAndDelete(long id)
{
    Console.WriteLine($"Confirmación de eliminación para el empleado con ID: {id}");

    string mensaje = $"¿Estás seguro de que deseas eliminar el empleado con ID {id}?";
    if (await JSRuntime.InvokeAsync<bool>("confirm", mensaje))
    {
        Console.WriteLine($"Usuario confirmó la eliminación del empleado con ID: {id}");
        await DeleteEmpleado(id);
    }
    else
    {
        Console.WriteLine("El usuario canceló la eliminación.");
    }
}

}
