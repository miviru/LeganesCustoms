@page "/editarEmpleado/{Id:long}"
@inject IEmpleadoService EmpleadoService
@inject NavigationManager NavigationManager
@using LeganesCustomsBlazor.Models
@using LeganesCustomsBlazor.Dtos
@using System.Text.Json
@using LeganesCustomsBlazor.Services

<PageTitle>Editar Empleado</PageTitle>

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-lg-12">
            <h3>EDITAR EMPLEADO</h3>
        </div>
    </div>

    @if (empleado == null)
    {
        <p>Cargando datos del empleado...</p>
    }
    else
    {
        <div class="row">
            <EditForm Model="@empleado" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger">@errorMessage</div>
                }

                <div class="form-group mt-3">
                    <label for="email">Email:</label>
                    <div class="col-md-5">
                        <InputText id="email" class="form-control" @bind-Value="empleado.Email" />
                    </div>
                    <ValidationMessage For="@(() => empleado.Email)" />
                </div>

                <div class="form-group mt-3">
                    <label for="telefono">Teléfono:</label>
                    <div class="col-md-5">
                        <InputText id="telefono" class="form-control" @bind-Value="empleado.Telefono" />
                    </div>
                    <ValidationMessage For="@(() => empleado.Telefono)" />
                </div>

                <div class="form-group mt-3">
                    <label for="direccion">Dirección:</label>
                    <div class="col-md-5">
                        <InputText id="direccion" class="form-control" @bind-Value="empleado.Direccion" />
                    </div>
                    <ValidationMessage For="@(() => empleado.Direccion)" />
                </div>

                <div class="form-group mt-3">
                    <label for="puesto">Puesto:</label>
                    <div class="col-md-5">
                        <InputSelect id="puesto" class="form-control" @bind-Value="empleado.Puesto">
                            @foreach (var puesto in puestosDisponibles)
                            {
                                <option value="@puesto">@puesto</option>
                            }
                        </InputSelect>
                    </div>
                    <ValidationMessage For="@(() => empleado.Puesto)" />
                </div>

                <div class="form-group mt-3">
                    <label for="sueldo">Sueldo:</label>
                    <div class="col-md-5">
                        <InputNumber id="sueldo" class="form-control" @bind-Value="empleado.Sueldo" />
                    </div>
                    <ValidationMessage For="@(() => empleado.Sueldo)" />
                </div>

                <div class="form-group mt-3">
                    <label for="password">Contraseña:</label>
                    <div class="col-md-5">
                        <InputText id="password" class="form-control" @bind-Value="empleado.Password" type="password" />
                    </div>
                    <ValidationMessage For="@(() => empleado.Password)" />
                </div>

                <div class="form-group mt-3">
                    <label for="confirmPassword">Confirmar Contraseña:</label>
                    <div class="col-md-5">
                        <InputText id="confirmPassword" class="form-control" @bind-Value="empleado.ConfirmPassword" type="password" />
                    </div>
                    <ValidationMessage For="@(() => empleado.ConfirmPassword)" />
                </div>

                <div class="mt-3">
                    <button type="submit" class="btn btn-outline-success">Guardar Cambios</button>
                    <NavLink class="btn btn-outline-secondary ms-2 text-white" href="/empleado">Cancelar</NavLink>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public long Id { get; set; }

    private EmpleadoDto empleado = new EmpleadoDto
    {
        Citas = new List<CitaDto>()
    };

    private List<string> puestosDisponibles = new List<string>
    {
        "Recepcionista",
        "Mecánico"
    };

    private string errorMessage = string.Empty;
    private EditContext? editContext;

    protected override void OnInitialized()
    {
        editContext = new EditContext(empleado);
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Console.WriteLine($"[View] Cargando datos del empleado con ID: {Id}");
            empleado = await EmpleadoService.GetEmpleadoByIdAsync(Id);
            if (empleado == null)
            {
                errorMessage = "Empleado no encontrado.";
                Console.WriteLine($"[View] {errorMessage}");
            }
            else
            {
                Console.WriteLine($"[View] Datos cargados: {JsonSerializer.Serialize(empleado)}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los datos del empleado: {ex.Message}";
            Console.WriteLine($"[View] {errorMessage}");
        }
    }

    private async Task HandleValidSubmit()
    {
        // Validar que la contraseña y la confirmación coinciden, si están presentes
        if (!string.IsNullOrEmpty(empleado.Password) && empleado.Password != empleado.ConfirmPassword)
        {
            errorMessage = "La contraseña y la confirmación no coinciden.";
            Console.WriteLine("[View] " + errorMessage);
            return;
        }

        // Evitar enviar ConfirmPassword al backend
        empleado.ConfirmPassword = null;

        // Opcional: Limpia el campo de contraseña si no se modificó
        if (string.IsNullOrEmpty(empleado.Password))
        {
            empleado.Password = null;
        }

        try
        {
            Console.WriteLine($"[View] Enviando datos para actualizar: {JsonSerializer.Serialize(empleado)}");
            await EmpleadoService.UpdateEmpleadoAsync(empleado);
            Console.WriteLine("[View] Actualización exitosa, redirigiendo a /empleado");
            NavigationManager.NavigateTo("/empleado");
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar los cambios: {ex.Message}";
            Console.WriteLine($"[View] {errorMessage}");
        }
    }

}
