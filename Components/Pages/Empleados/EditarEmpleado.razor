@page "/editarEmpleado/{Id:long}"
@inject EmpleadoService EmpleadoService
@inject NavigationManager NavigationManager
@using LeganesCustomsBlazor.Models;
@using LeganesCustomsBlazor.Dtos;
@using System.Text.Json

<PageTitle>Editar Empleado</PageTitle>

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-lg-12">
            <h3>EDITAR EMPLEADO</h3>
        </div>
    </div>

    @if (empleado == null)
    {
        <p>Cargando datos del empleado...</p>
    }
    else
    {
        <div class="row">
        <EditForm Model="@empleado" OnValidSubmit="HandleValidSubmit" FormName="EditarEmpleado">
            <DataAnnotationsValidator />

            <!-- Mostrar mensaje de error -->
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                    <div class="alert alert-danger">@errorMessage</div>
            }
            <div class="form-group mt-3">
                <label for="email" class="form-label">Email:</label>
                <div class="col-md-5">
                    <InputText id="email" class="form-control" @bind-Value="empleado.Email" />
                    <ValidationMessage For="@(() => empleado.Email)" />
                </div>
            </div>

            <div class="form-group mt-3">
                <label for="telefono" class="form-label">Teléfono:</label>
                <div class="col-md-5">
                    <InputText id="telefono" class="form-control" @bind-Value="empleado.Telefono" />
                    <ValidationMessage For="@(() => empleado.Telefono)" />
                </div>
            </div>

            <div class="form-group mt-3">
                <label for="direccion" class="form-label">Dirección:</label>
                <div class="col-md-5">
                    <InputText id="direccion" class="form-control" @bind-Value="empleado.Direccion" />
                    <ValidationMessage For="@(() => empleado.Direccion)" />
                </div>
            </div>

            <div class="form-group mt-3">
                <label for="puesto" class="form-label">Puesto:</label>
                <div class="col-md-5">
                    <InputSelect id="puesto" class="form-control" @bind-Value="empleado.Puesto">
                        <option value=""disabled selected>Seleccione un puesto</option>
                            @foreach (var puesto in puestosDisponibles)
                            {
                                <option value="@puesto">@puesto</option>
                            }
                    </InputSelect>
                    <ValidationMessage For="@(() => empleado.Puesto)" />
                </div>
            </div>

            <div class="form-group mt-3">
                <label for="sueldo" class="form-label">Sueldo:</label>
                <div class="col-md-5">
                    <InputNumber id="sueldo" class="form-control" @bind-Value="empleado.Sueldo" />
                    <ValidationMessage For="@(() => empleado.Sueldo)" />
                </div>
            </div>

                <div class="mt-3">
                    <button type="submit" class="btn btn-success">Guardar Cambios</button>
                    <NavLink class="btn btn-outline-secondary ms-2 text-white" href="/empleado">Cancelar</NavLink>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public long Id { get; set; } // Parámetro recibido desde la URL

    private EmpleadoDto empleado = new EmpleadoDto
    {
        Citas = new List<CitaDto>() // Inicialización con lista vacía
    };

    private List<string> puestosDisponibles = new List<string>
    {
        "Recepcionista",
        "Mecánico"
    };

    private string errorMessage = string.Empty;
    private EditContext editContext;
    protected override void OnInitialized()
    {
        editContext = new EditContext(empleado);
    }

    // Cargar datos del empleado
    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Entrando a OnParametersSetAsync");
        try
        {
            Console.WriteLine($"Cargando datos del empleado con ID: {Id}");
            empleado = await EmpleadoService.GetEmpleadoByIdAsync(Id); // Vuelve a cargar los datos
            if (empleado == null)
            {
                errorMessage = "Empleado no encontrado.";
                Console.WriteLine(errorMessage);
            }
            else
            {
                Console.WriteLine($"Datos del empleado cargados: {JsonSerializer.Serialize(empleado)}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los datos del empleado: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        Console.WriteLine("Saliendo de OnParametersSetAsync");
    }

    private async Task HandleValidSubmit()
    {
        if (!editContext.Validate())
        {
            Console.WriteLine("Errores de validación en el formulario.");
            return;
        }

        try
        {
            // Actualiza los datos en la base de datos
            await EmpleadoService.UpdateEmpleadoAsync(empleado);

            // Recarga los datos del servidor
            empleado = await EmpleadoService.GetEmpleadoByIdAsync(empleado.Id_Empleado);
            Console.WriteLine($"Datos actualizados del empleado: {JsonSerializer.Serialize(empleado)}");

            Console.WriteLine("Empleado actualizado correctamente.");
            errorMessage = string.Empty;

            NavigationManager.NavigateTo($"/empleado");

        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar los cambios: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private Empleado MapToEmpleado(EmpleadoDto dto)
    {
        return new Empleado
        {
            Id_Empleado = dto.Id_Empleado,
            Nombre = dto.Nombre,
            Apellido1 = dto.Apellido1,
            Apellido2 = dto.Apellido2,
            DNI = dto.DNI,
            Email = dto.Email,
            Telefono = dto.Telefono,
            Direccion = dto.Direccion
        };
    }
}
