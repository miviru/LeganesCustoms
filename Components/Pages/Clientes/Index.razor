@page "/cliente"
@inject ClienteService ClienteService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using LeganesCustomsBlazor.Models;
@using LeganesCustomsBlazor.Dtos;

<PageTitle>Clientes</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 mb-4 mt-3">
            <h3> CLIENTES</h3>
        </div>
    </div>

    <div class="row mb-4">
        <!-- Tarjeta para crear un nuevo cliente -->
        <div class="col-12 col-md-6 col-lg-4">
            <div class="card" style="background-image: url('/fondo2.jpg'); background-size: cover; background-position: center;">
                <div class="card-body d-flex flex-column align-items-center justify-content-center">
                    <NavLink class="btn btn-outline-warning" href="/crearCliente">
                        Crear Cliente
                    </NavLink>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Tarjetas para los clientes existentes -->
        @if (clientes != null && clientes.Any())
        {
            @foreach (var cliente in clientes)
            {
                <div class="col-12 col-md-6 col-lg-4">
                    <div class="card mt-4" style="background-image: url('/fondo2.jpg'); background-size: cover; background-position: center;">
                        <div class="card-body d-flex flex-wrap align-items-center">
                            <h5 class="card-title me-5 mt-2">@cliente.Nombre @cliente.Apellido1 @cliente.Apellido2</h5>
                            <NavLink class="btn btn-outline-secondary text-white me-2" href="@($"/detallesCliente/{cliente.Id_Cliente}")">Detalles</NavLink>
                            <NavLink class="btn btn-outline-light me-2" href="@($"/editarCliente/{cliente.Id_Cliente}")">Editar</NavLink>
                            <button @onclick="() => ConfirmAndDelete(cliente.Id_Cliente)" class="btn btn-outline-danger">Eliminar</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center">
                <p>No hay clientes registrados.</p>
            </div>
        }
    </div>
</div>

@code {
    private List<ClienteDto> clientes = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            clientes = await ClienteService.GetClientesAsync();
            Console.WriteLine($"Clientes cargados: {clientes.Count}");
            StateHasChanged(); // Forzar renderizado
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar los clientes: {ex.Message}");
        }
    }

    private void EditCliente(long clienteId)
    {
        NavigationManager.NavigateTo($"/editarCliente/{clienteId}");
    }

    private async Task DeleteCliente(long id)
    {
        try
        {
            Console.WriteLine($"Eliminando cliente con ID: {id}");
            await ClienteService.DeleteClienteAsync(id);
            Console.WriteLine($"Cliente con ID {id} eliminado del servidor.");

            clientes.Remove(clientes.First(e => e.Id_Cliente == id)); // Actualiza la lista local
            Console.WriteLine($"Cliente con ID {id} eliminado localmente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar el cliente con ID {id}: {ex.Message}");
        }
    }

    private async Task ConfirmAndDelete(long id)
{
    Console.WriteLine($"Confirmación de eliminación para el cliente con ID: {id}");

    string mensaje = $"¿Estás seguro de que deseas eliminar el cliente con ID {id}?";
    if (await JSRuntime.InvokeAsync<bool>("confirm", mensaje))
    {
        Console.WriteLine($"Usuario confirmó la eliminación del cliente con ID: {id}");
        await DeleteCliente(id);
    }
    else
    {
        Console.WriteLine("El usuario canceló la eliminación.");
    }
}
}
