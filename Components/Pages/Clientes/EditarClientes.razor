@page "/editarCliente/{Id:long}"
@inject ClienteService ClienteService
@inject VehiculoService VehiculoService
@inject NavigationManager NavigationManager
@using LeganesCustomsBlazor.Models;
@using LeganesCustomsBlazor.Dtos;
@using System.Text.Json

<PageTitle>Editar Cliente</PageTitle>

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-lg-12">
            <h3>EDITAR CLIENTE</h3>
        </div>
    </div>

    @if (cliente == null)
    {
        <p>Cargando datos del cliente...</p>
    }
    else
    {
        <div class="row">
            <EditForm Model="@cliente" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mt-3">
                    <label for="email" class="form-label">Email:</label>
                    <div class="col-md-5">
                        <InputText id="email" class="form-control" @bind-Value="cliente.Email" />
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label for="telefono" class="form-label">Teléfono:</label>
                    <div class="col-md-5">
                        <InputText id="telefono" class="form-control" @bind-Value="cliente.Telefono" />
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label for="direccion" class="form-label">Dirección:</label>
                    <div class="col-md-5">
                        <InputText id="direccion" class="form-control" @bind-Value="cliente.Direccion" />
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label for="password">Contraseña:</label>
                    <div class="col-md-5">
                        <InputText id="password" type="password" class="form-control" @bind-Value="cliente.Password" />
                    </div>
                    <ValidationMessage For="@(() => cliente.Password)" />
                </div>

                <div class="form-group mt-3">
                    <label for="confirmPassword">Confirmar Contraseña:</label>
                    <div class="col-md-5">
                        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="cliente.ConfirmPassword" />
                    </div>
                    <ValidationMessage For="@(() => cliente.ConfirmPassword)" />
                </div>

                 <!-- Asociación de vehículos -->
                <div class="form-group mt-3">
                    <div class="col-md-5">
                        <input type="checkbox" id="asociarVehiculo" @bind="AsociarVehiculo" />
                        <label for="asociarVehiculo">¿Desea asociar un vehículo existente?</label>
                        @if (AsociarVehiculo)
                        {
                            <div class="mt-3">
                                <label for="vehiculo">Vehículo:</label>
                                <select id="vehiculo" class="form-select" @bind="VehiculoSeleccionadoId">
                                    <option value="">Seleccione un vehículo</option>
                                    @foreach (var vehiculo in VehiculosDisponibles)
                                    {
                                        <option value="@vehiculo.Id_Vehiculo">@vehiculo.Fabricante - @vehiculo.Modelo (@vehiculo.Matricula)</option>
                                    }
                                </select>
                            </div>
                        }
                    </div>
                </div>

                <div class="mt-3">
                    <button type="submit" class="btn btn-outline-success">Guardar Cambios</button>
                    <NavLink class="btn btn-outline-secondary ms-2 text-white" href="/cliente">Cancelar</NavLink>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public long Id { get; set; } // Parámetro recibido desde la URL

    private ClienteDto cliente = new ClienteDto();
    private EditContext? editContext;
    private List<VehiculoDto> VehiculosDisponibles = new List<VehiculoDto>();
    private bool AsociarVehiculo = false;
    private long? VehiculoSeleccionadoId = null;

    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cliente = await ClienteService.GetClienteByIdAsync(Id);

            if (cliente == null)
            {
                errorMessage = "Cliente no encontrado.";
                return;
            }

            // Inicializa editContext después de cargar los datos
            editContext = new EditContext(cliente);

            // Cargar vehículos disponibles sin propietario
            VehiculosDisponibles = await VehiculoService.ObtenerVehiculosSinPropietarioAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar datos: {ex.Message}";
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Entrando a OnParametersSetAsync");
        try
        {
            Console.WriteLine($"Cargando datos del cliente con ID: {Id}");
            cliente = await ClienteService.GetClienteByIdAsync(Id); // Vuelve a cargar los datos
            if (cliente == null)
            {
                errorMessage = "Cliente no encontrado.";
                Console.WriteLine(errorMessage);
            }
            else
            {
                Console.WriteLine($"Datos del cliente cargados: Teléfono: {cliente.Telefono}, Dirección: {cliente.Direccion}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los datos del cliente: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        Console.WriteLine("Saliendo de OnParametersSetAsync");
    }

  private async Task HandleValidSubmit()
{
    if (!editContext.Validate())
    {
        Console.WriteLine("Errores de validación en el formulario.");
        return;
    }

    if (!string.IsNullOrEmpty(cliente.Password) || !string.IsNullOrEmpty(cliente.ConfirmPassword))
    {
        if (cliente.Password != cliente.ConfirmPassword)
        {
            errorMessage = "La contraseña y la confirmación no coinciden.";
            Console.WriteLine(errorMessage);
            return;
        }

        if (cliente.Password!.Length < 8)
        {
            errorMessage = "La contraseña debe tener al menos 8 caracteres.";
            Console.WriteLine(errorMessage);
            return;
        }
    }

    try
    {
        if (AsociarVehiculo && VehiculoSeleccionadoId.HasValue)
        {
            var vehiculoDto = VehiculosDisponibles.FirstOrDefault(v => v.Id_Vehiculo == VehiculoSeleccionadoId.Value);
            if (vehiculoDto != null)
            {
                if (cliente.Id_Cliente <= 0)
                {
                    errorMessage = "El cliente no tiene un ID válido.";
                    Console.WriteLine(errorMessage);
                    return;
                }

                vehiculoDto.Id_cliente = cliente.Id_Cliente; // Asocia el cliente al vehículo
                cliente.Vehiculos.Add(vehiculoDto);
            }
        }

        await ClienteService.UpdateClienteAsync(cliente);
        Console.WriteLine($"Cliente actualizado: {JsonSerializer.Serialize(cliente)}");
        NavigationManager.NavigateTo("/cliente");
    }
    catch (Exception ex)
    {
        errorMessage = $"Error al guardar los cambios: {ex.Message}";
        Console.WriteLine(errorMessage);
    }
}

    private Cliente MapToCliente(ClienteDto dto)
    {
        return new Cliente
        {
            Id_Cliente = dto.Id_Cliente,
            Nombre = dto.Nombre,
            Apellido1 = dto.Apellido1,
            Apellido2 = dto.Apellido2,
            DNI = dto.DNI,
            Email = dto.Email,
            Telefono = dto.Telefono,
            Direccion = dto.Direccion
        };
    }
}
