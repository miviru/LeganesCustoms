@page "/editarCliente/{Id:long}"
@inject ClienteService ClienteService
@inject NavigationManager NavigationManager
@using LeganesCustomsBlazor.Models;
@using LeganesCustomsBlazor.Dtos;

<PageTitle>Editar Cliente</PageTitle>

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-lg-12">
            <h3>EDITAR CLIENTE</h3>
        </div>
    </div>

    @if (cliente == null)
    {
        <p>Cargando datos del cliente...</p>
    }
    else
    {
        <div class="row">
            <EditForm Model="@cliente" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mt-3">
                    <label for="email" class="form-label">Email:</label>
                    <div class="col-md-5">
                        <InputText id="email" class="form-control" @bind-Value="cliente.Email" />
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label for="telefono" class="form-label">Teléfono:</label>
                    <div class="col-md-5">
                        <InputText id="telefono" class="form-control" @bind-Value="cliente.Telefono" />
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label for="direccion" class="form-label">Dirección:</label>
                    <div class="col-md-5">
                        <InputText id="direccion" class="form-control" @bind-Value="cliente.Direccion" />
                    </div>
                </div>

                <div class="mt-3">
                    <button type="submit" class="btn btn-success">Guardar Cambios</button>
                    <NavLink class="btn btn-outline-secondary ms-2 text-white" href="/cliente">Cancelar</NavLink>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public long Id { get; set; } // Parámetro recibido desde la URL

    private ClienteDto? cliente;
    private EditContext? editContext;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            cliente = await ClienteService.GetClienteByIdAsync(Id);
            if (cliente != null)
            {
                editContext = new EditContext(cliente);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar cliente: {ex.Message}");
        }
    }

    private async Task HandleValidSubmit()
    {
        if (cliente == null)
        {
            Console.WriteLine("Error: El cliente no está inicializado.");
            return;
        }

        try
        {
            await ClienteService.UpdateClienteAsync(cliente);
            Console.WriteLine("Cliente actualizado con éxito.");
            NavigationManager.NavigateTo("/cliente");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al actualizar cliente: {ex.Message}");
        }
    }
}
