@page "/editarCliente/{Id:long}"
@inject ClienteService ClienteService
@inject NavigationManager NavigationManager
@using LeganesCustomsBlazor.Models;
@using LeganesCustomsBlazor.Dtos;
@using System.Text.Json

<PageTitle>Editar Cliente</PageTitle>

<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-lg-12">
            <h3>EDITAR CLIENTE</h3>
        </div>
    </div>

    @if (cliente == null)
    {
        <p>Cargando datos del cliente...</p>
    }
    else
    {
        <div class="row">
            <EditForm Model="@cliente" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mt-3">
                    <label for="email" class="form-label">Email:</label>
                    <div class="col-md-5">
                        <InputText id="email" class="form-control" @bind-Value="cliente.Email" />
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label for="telefono" class="form-label">Teléfono:</label>
                    <div class="col-md-5">
                        <InputText id="telefono" class="form-control" @bind-Value="cliente.Telefono" />
                    </div>
                </div>

                <div class="form-group mt-3">
                    <label for="direccion" class="form-label">Dirección:</label>
                    <div class="col-md-5">
                        <InputText id="direccion" class="form-control" @bind-Value="cliente.Direccion" />
                    </div>
                </div>

                <div class="mt-3">
                    <button type="submit" class="btn btn-success">Guardar Cambios</button>
                    <NavLink class="btn btn-outline-secondary ms-2 text-white" href="/cliente">Cancelar</NavLink>
                </div>
            </EditForm>
        </div>
    }
</div>

@code {
    [Parameter]
    public long Id { get; set; } // Parámetro recibido desde la URL

    private ClienteDto cliente = new ClienteDto();
    private EditContext? editContext;

    private string errorMessage = string.Empty;
    protected override void OnInitialized()
    {
        editContext = new EditContext(cliente);
    }

    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("Entrando a OnParametersSetAsync");
        try
        {
            Console.WriteLine($"Cargando datos del cliente con ID: {Id}");
            cliente = await ClienteService.GetClienteByIdAsync(Id); // Vuelve a cargar los datos
            if (cliente == null)
            {
                errorMessage = "Cliente no encontrado.";
                Console.WriteLine(errorMessage);
            }
            else
            {
                Console.WriteLine($"Datos del cliente cargados: Teléfono: {cliente.Telefono}, Dirección: {cliente.Direccion}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar los datos del cliente: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
        Console.WriteLine("Saliendo de OnParametersSetAsync");
    }

    private async Task HandleValidSubmit()
    {
        if (!editContext.Validate())
        {
            Console.WriteLine("Errores de validación en el formulario.");
            return;
        }

        try
        {
            // Actualiza los datos en la base de datos
            await ClienteService.UpdateClienteAsync(cliente);

            // Recarga los datos del servidor
            cliente = await ClienteService.GetClienteByIdAsync(cliente.Id_Cliente);
            Console.WriteLine($"Datos actualizados del cliente: {JsonSerializer.Serialize(cliente)}");

            Console.WriteLine("Cliente actualizado correctamente.");
            errorMessage = string.Empty;

            NavigationManager.NavigateTo($"/cliente");

        }
        catch (Exception ex)
        {
            errorMessage = $"Error al guardar los cambios: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private Cliente MapToCliente(ClienteDto dto)
    {
        return new Cliente
        {
            Id_Cliente = dto.Id_Cliente,
            Nombre = dto.Nombre,
            Apellido1 = dto.Apellido1,
            Apellido2 = dto.Apellido2,
            DNI = dto.DNI,
            Email = dto.Email,
            Telefono = dto.Telefono,
            Direccion = dto.Direccion
        };
    }
}
