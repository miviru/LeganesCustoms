@using LeganesCustomsBlazor.Models
@using LeganesCustomsBlazor.Dtos
@inject ClienteService ClienteService
@inject NavigationManager NavigationManager

<h4>Selecciona un Cliente</h4>

<div>
    <label for="cliente-select">Clientes Registrados</label>
    <div class="col-md-5">
        <select id="cliente-select" class="form-select" @bind="ClienteSeleccionadoId">
            <option value="">-- Seleccione un cliente --</option>
            @foreach (var cliente in ClientesDisponibles)
            {
                <option value="@cliente.Id_Cliente">@cliente.Nombre @cliente.Apellido1 @cliente.Apellido2 (@cliente.DNI)</option>
            }
        </select>
    </div>

    <button class="btn btn-primary mt-3" @onclick="SeleccionarCliente" disabled="@(ClienteSeleccionadoId == null)">Seleccionar</button>
    <button class="btn btn-secondary mt-3 ms-2" @onclick="CrearCliente">Crear Nuevo Cliente</button>
</div>

@code {
    private List<Cliente> ClientesDisponibles = new();
    private long? ClienteSeleccionadoId;

    [Parameter] public EventCallback<Cliente> OnClienteSeleccionado { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtener clientes como ClienteDto
            var clientesDto = await ClienteService.ObtenerClientesAsync();

            // Mapear ClienteDto a Cliente
            ClientesDisponibles = clientesDto.Select(dto => new Cliente
            {
                Id_Cliente = dto.Id_Cliente,
                Nombre = dto.Nombre,
                Apellido1 = dto.Apellido1,
                Apellido2 = dto.Apellido2,
                DNI = dto.DNI,
                Email = dto.Email,
                Telefono = dto.Telefono,
                Direccion = dto.Direccion
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar clientes: {ex.Message}");
        }
    }

    private async Task SeleccionarCliente()
    {
        var clienteSeleccionado = ClientesDisponibles.FirstOrDefault(c => c.Id_Cliente == ClienteSeleccionadoId);
        if (clienteSeleccionado != null)
        {
            await OnClienteSeleccionado.InvokeAsync(clienteSeleccionado);
        }
    }

    private void CrearCliente()
    {
        NavigationManager.NavigateTo("/crearCliente");
    }
}
