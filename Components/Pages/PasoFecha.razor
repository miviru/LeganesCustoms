@using Syncfusion.Blazor.Calendars
@using LeganesCustomsBlazor.Models

<div class="container-fluid">
    <div class="row">
        <div class="col-md-12">
            <h4>Selecciona Fecha y Hora</h4>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <label for="date-select">Fecha</label>
            <SfCalendar TValue="DateTime?" 
                        @bind-Value="SelectedDate" 
                        CssClass="form-control sf-calendar" 
                        Min="@DateTime.Today" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <label for="time-select">Hora</label>
            <select id="time-select" class="form-select" @bind="SelectedTime" disabled="@(AvailableHours.Count == 0)">
                <option value="">-- Selecciona una hora --</option>
                @foreach (var time in AvailableHours)
                {
                    <option value="@time">@time</option>
                }
            </select>
        </div>
    </div>

    <div class="row">
        <div class="col-md-12">
            <button class="btn btn-primary mt-3" @onclick="HandleNext" disabled="@string.IsNullOrEmpty(SelectedTime)">Siguiente</button>
            <button class="btn btn-secondary mt-3 ms-2" @onclick="PreviousStep">Anterior</button>
        </div>
    </div>
</div>

@code {
    [Parameter] public EventCallback<DateTime> OnDateTimeSelected { get; set; }
    [Parameter] public EventCallback OnPrevious { get; set; }
    [Parameter] public decimal ServiceDuration { get; set; }

    private DateTime? _selectedDate;
    private DateTime? SelectedDate
    {
        get => _selectedDate;
        set
        {
            if (_selectedDate != value)
            {
                _selectedDate = value;
                UpdateAvailableHours();
            }
        }
    }

    private string? SelectedTime;
    private List<string> AvailableHours = new();

    private Dictionary<DateTime, List<string>> Schedule = new();

    protected override void OnInitialized()
    {
        InitializeSchedule();
        base.OnInitialized();
    }

    private void InitializeSchedule()
    {
        for (var date = DateTime.Today; date <= DateTime.Today.AddMonths(1); date = date.AddDays(1))
        {
            if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
            {
                Schedule[date] = new List<string>(); // No hours for weekends
            }
            else
            {
                Schedule[date] = new List<string> { "09:00", "10:00", "11:00", "14:00", "15:00" }; // Example hours
            }
        }
    }

    private void UpdateAvailableHours()
    {
        if (SelectedDate.HasValue && Schedule.ContainsKey(SelectedDate.Value.Date))
        {
            AvailableHours = Schedule[SelectedDate.Value.Date]
                .Where(time => CanFitService(time, ServiceDuration))
                .ToList();
        }
        else
        {
            AvailableHours.Clear();
        }
    }

    private bool CanFitService(string startTime, decimal duration)
    {
        var start = DateTime.ParseExact(startTime, "HH:mm", null);
        var end = start.AddHours((double)duration);

        return end.TimeOfDay <= new TimeSpan(17, 0, 0);
    }

    private async Task HandleNext()
    {
        if (SelectedDate.HasValue && !string.IsNullOrEmpty(SelectedTime))
        {
            var selectedDateTime = SelectedDate.Value.Date + DateTime.ParseExact(SelectedTime, "HH:mm", null).TimeOfDay;
            await OnDateTimeSelected.InvokeAsync(selectedDateTime);
        }
    }

    private async Task PreviousStep()
    {
        await OnPrevious.InvokeAsync();
    }
}
