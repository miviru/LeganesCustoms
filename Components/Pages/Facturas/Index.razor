@page "/factura"
@inject FacturaService FacturaService
@inject NavigationManager NavigationManager
@using LeganesCustomsBlazor.Models;
@using LeganesCustomsBlazor.Dtos;
@using LeganesCustomsBlazor.Services
@inject PdfService PdfService


<PageTitle>Facturas</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-lg-12 mb-4 mt-3">
            <h3>FACTURAS</h3>
        </div>
    </div>

    <div class="row">
        <!-- Tarjetas para las facturas existentes -->
        @if (facturas != null && facturas.Any())
        {
            @foreach (var factura in facturas)
            {
                <div class="col-12 col-md-6 col-lg-4">
                    <div class="card mt-4" style="background-image: url('/fondo2.jpg'); background-size: cover; background-position: center;">
                        <div class="card-body d-flex flex-wrap align-items-center">
                            <h5 class="card-title me-2 mt-2">Nº: @factura.Id - @factura.ClienteNombre</h5>
                            <NavLink class="btn btn-outline-secondary text-white me-2" href="@($"/detallesFactura/{factura.Id}")">Detalles</NavLink>
                            <NavLink class="btn btn-outline-light me-2" href="@($"/editarFactura/{factura.Id}")">Editar</NavLink>
                            <button @onclick="() => DeleteFactura(factura.Id)" class="btn btn-outline-danger me-2">Eliminar</button>
                        </div>
                    </div>
                </div>
            }
        }
        else
        {
            <div class="col-12 text-center">
                <p>No hay factura registradas.</p>
            </div>
        }
    </div>
</div>

@code {
    private List<FacturaDto> facturas = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadFacturasAsync();
    }

    private async Task LoadFacturasAsync()
    {
        try
        {
            // Obtén las facturas desde el servicio
            var facturasModel = await FacturaService.GetAllFacturasAsync();

            // Mapea las facturas al modelo necesario (FacturaDto en este caso)
            facturas = facturasModel.Select(f => new FacturaDto
            {
                Id = f.Id,
                Precio = f.Precio,
                Descuento = f.Descuento,
                ClienteId = f.ClienteId,
                ClienteNombre = f.ClienteNombre 
            }).ToList();

            // Muestra el conteo de facturas cargadas en la consola
            Console.WriteLine($"Facturas cargadas: {facturas.Count}");

            // Notifica al componente que debe renderizarse nuevamente
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Muestra el error en la consola
            Console.WriteLine($"Error al cargar las facturas: {ex.Message}");
        }
    }

    private async Task DeleteFactura(long facturaId)
    {
        try
        {
            await FacturaService.DeleteFacturaAsync(facturaId);
            facturas = facturas.Where(v => v.Id != facturaId).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar la factura: {ex.Message}");
        }
    }

    private async Task GeneratePdf(FacturaDto factura)
    {
        try
        {
            await PdfService.GenerateAndDownloadPdf(factura);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al generar PDF: {ex.Message}");
        }
    }
}
